rule win_billgates_auto {

    meta:
        author = "Felix Bilstein - yara-signator at cocacoding dot com"
        date = "2020-12-01"
        version = "1"
        description = "autogenerated rule brought to you by yara-signator"
        tool = "yara-signator v0.5.0"
        tool_config = "callsandjumps;datarefs;binvalue"
        malpedia_reference = "https://malpedia.caad.fkie.fraunhofer.de/details/win.billgates"
        malpedia_rule_date = "20201127"
        malpedia_hash = "ae61de407d8ec67cdbe44187237e174f42b42c47"
        malpedia_version = ""
        malpedia_license = "CC BY-SA 4.0"
        malpedia_sharing = "TLP:WHITE"

    /* DISCLAIMER
     * The strings used in this rule have been automatically selected from the
     * disassembly of memory dumps and unpacked files, using YARA-Signator.
     * The code and documentation is published here:
     * https://github.com/fxb-cocacoding/yara-signator
     * As Malpedia is used as data source, please note that for a given
     * number of families, only single samples are documented.
     * This likely impacts the degree of generalization these rules will offer.
     * Take the described generation method also into consideration when you
     * apply the rules in your use cases and assign them confidence levels.
     */


    strings:
        $sequence_0 = { 3c11 7408 3c22 7404 }
            // n = 4, score = 200
            //   3c11                 | cmp                 edi, eax
            //   7408                 | jb                  0xcc
            //   3c22                 | mov                 edx, dword ptr [esi + 0xc0]
            //   7404                 | cmp                 edi, eax

        $sequence_1 = { 8d8809f9ffff b8c94216b2 f7e9 03d1 c1fa04 }
            // n = 5, score = 200
            //   8d8809f9ffff         | sub                 esp, 0x14
            //   b8c94216b2           | push                1
            //   f7e9                 | lea                 eax, [esp + 7]
            //   03d1                 | push                eax
            //   c1fa04               | push                8

        $sequence_2 = { 750a ff15???????? f7d8 782f }
            // n = 4, score = 200
            //   750a                 | push                eax
            //   ff15????????         |                     
            //   f7d8                 | lea                 eax, [esp + 0x48]
            //   782f                 | mov                 dword ptr fs:[0], eax

        $sequence_3 = { 3c21 7408 3c23 7404 }
            // n = 4, score = 200
            //   3c21                 | cmp                 edi, eax
            //   7408                 | jb                  0xf1
            //   3c23                 | mov                 esi, dword ptr [esp + 0x30]
            //   7404                 | cmp                 edi, eax

        $sequence_4 = { 7404 3c58 7507 b802000000 eb02 }
            // n = 5, score = 200
            //   7404                 | dec                 eax
            //   3c58                 | cmovae              ecx, dword ptr [esp + 0x80]
            //   7507                 | dec                 esp
            //   b802000000           | lea                 eax, [0x247c9]
            //   eb02                 | dec                 eax

        $sequence_5 = { ff15???????? 83f8ff 7508 ff15???????? f7d8 }
            // n = 5, score = 200
            //   ff15????????         |                     
            //   83f8ff               | cmp                 al, 0x40
            //   7508                 | mov                 edi, esi
            //   ff15????????         |                     
            //   f7d8                 | sar                 edx, 5

        $sequence_6 = { 3c10 740c 3c11 7408 }
            // n = 4, score = 200
            //   3c10                 | mov                 ebx, dword ptr [esp + 0x58]
            //   740c                 | movd                xmm0, eax
            //   3c11                 | cmp                 edi, eax
            //   7408                 | sete                bl

        $sequence_7 = { ff15???????? 83f8ff 750a ff15???????? f7d8 }
            // n = 5, score = 200
            //   ff15????????         |                     
            //   83f8ff               | cmp                 edx, 1
            //   750a                 | jae                 0x16be
            //   ff15????????         |                     
            //   f7d8                 | lea                 esi, [ebp - 0x34]

        $sequence_8 = { 3c10 740c 3c11 7408 3c22 7404 3c30 }
            // n = 7, score = 200
            //   3c10                 | cmp                 esi, 0xbb8
            //   740c                 | jge                 0x902
            //   3c11                 | mov                 esi, 0xbb8
            //   7408                 | xor                 ebx, ebx
            //   3c22                 | push                ebx
            //   7404                 | sar                 edi, 2
            //   3c30                 | cmp                 edi, edx

        $sequence_9 = { 83f8ff 750a ff15???????? f7d8 }
            // n = 4, score = 200
            //   83f8ff               | add                 ecx, 4
            //   750a                 | jae                 0x339
            //   ff15????????         |                     
            //   f7d8                 | mov                 eax, dword ptr [ebx]

    condition:
        7 of them and filesize < 801792
}

rule Backdoor_BillGates {
   meta:
      description = "Backdoor.BillGates"
      author = "LightDefender"
      date = "2021-08-02"
      hash1 = "a42e903ae820f28980e819453ce24adcb66832cb474b993a288518562092fb68"
   strings:
      $s1 = "Taskkill /F /IM %s.exe" fullword ascii
      $s2 = "SESDKDummy.dll" fullword ascii
      $s3 = "Packet.dll" fullword ascii
      $s4 = "SESDKDummy64.dll" fullword ascii
      $s5 = "agony.sys" fullword ascii
      $s6 = "svch0st.exe" fullword ascii
      $s7 = "npf.sys (NT5/6 AMD64) Kernel Driver" fullword wide
      $s8 = "npf.sys" fullword wide
      $s9 = "Bill" fullword ascii
      $pdb = {00 46 3A 5C 55 70 64 61 74 65 73 5C E9 87 8D E6 9E 84 5C 47 61 74 65 73 49 6E 73 74 61 6C 6C 5C 52 65 6C 65 61 73 65 5C 47 61 74 65 73 49 6E 73 74 61 6C 6C 2E 70 64 62 00}
   condition:
      uint16(0) == 0x5a4d and
      (5 of ($s*) or $pdb)
}
